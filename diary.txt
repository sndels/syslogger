syslogger

Part 1: Initial plans
-------------------------------------------------------------------------------
Syslog was new to me so I started by going through the wikipedia article on the
subject. The assignment spec doesn't include facility and severity codes so those
are left as possible extensions if time permits. I figure it would be best to
define the daemon as a simple program that gives out pipes for client programs.
Each pipe should probably be opened in it's own thread or process to facilitate
concurrent messaging from multiple sources. The opening procedure should also
define a unique name for the client. Logging will at first be done to a single
file that is passed to the daemon as argument. Writing should be synchronized so
each pipe watcher writes a whole line at a time. The pipe watchers should be
terminated when the client closes and possible clients should be notified if the
daemon is closed with pipes open.

The library interface is probably simplest to define as a init/deninit for reg-
istering and unregistering clients as well as a single function that takes a
string and its length as argument. This can be extended to support the codes
with enum arguments if I decide to do those as well. The library should ask
for a pipe from the daemon when initialized and inform it when closing. Pipes
closed from the daemon side should be taken into account as well.

It will probably be a good idea to use a message queues for the (un)registration
to have handle multiple simultaneous requests robustly. SYSV messages keyed with
for example the recipent PID and a static unique key for the daemon seem like a
good choice. A static keyed queue will be used for the (un)registration events
from clients and communication from daemon to clients, like passing the pipe or
notification of the daemon exiting, are sent to queues keyed by
static key ^ client pid. This of course means that any child processes shouldn't
register logging.

Part 2: Interprocess messaging
-------------------------------------------------------------------------------
I started by modifying the sysv example code and setting up basic register and
unregister functionality between the daemon and library part of the logger. I
set a hard coded key defined in a header to ensure it staying synchronized and
the same header will be used for any other definitions that are needed in both
the library and daemon. Getting the messaging up and running was pretty straight
forward with the example code.

Multi-threading the daemon was a logical next step. I added a heap allocated array
for thread ids and spawned a thread for each registration message. The parent will
wait for all of the allocated threads to exit before exiting itself. At this point
I realized that the SIGINT -handling I used in assignment 1 will not suffice here
as it isn't thread safe and I need to check the set flag in threads as well. I
moved the signal handler it's own source file and used a mutex on write to the
static indicator variable. I exposed it to other units via a check function that
also uses the mutex to ensure the varible isn't read while being changed as there
is no guarantee which thread goes in the signal handler.

I again took the example fifo code and dropped it in the threaded log routine of
the daemon. A message is sent to the corresponding client to pass the fifo path.
At this point, I only push any input from the fifo straight to stdout without
worrying about synchronization between threads as I suspect that a simple mutex
is not the right idea for it. That would leave all other threads hanging while a
single one is writing, possibly concatenating subsequent messages because of the
propagating wait times with high demand. At this point I also moved the sysv
messaging to a set of wrapper functions to minimize duplicate code.

Part 3: Thread safe queue
-------------------------------------------------------------------------------
One idea that popped in mind was to just have a single writer thread that works
on a queue of messages. The log routine pushes a new message right away and locks
the buffer before actually writing tas the output thread might try to read it
simultaneously. A queue will of course defer all writes until the first message
in queue is finished but that is necessary to keep things in chronological order.
A simple linked list coud be a solution with mutexes added for the messages as well
as the queue. The writer will pop a message pushed to an empty queue immediately,
which requires synchronization to not read incomplete message contents.

Adding a writer routine was pretty straight forward but I did find a fatal bug in
my message wrapper while trying some different messages: I reallocated a passed
msg_t pointer parameter so the original was invalidated. The fix was simply passing
a pointer to the pointer, which would have been obvious had I just thought twice
when writing the initial implementation.

At this point, I also added a plaintext name to the client parameters to have better
differentiation. A invalid name (containing a space) will hang the client process,
as the daemon doesn't know which queue to message, and so far I've not thought of
a solution not involving hacky waits. It also occured to me that defining the
previously global interface variables as a struct is a needed. This way, a multi-
threaded application can create multiple logging connections with different names.

Part 4: Stress testing
-------------------------------------------------------------------------------
I made a simple client program that spawns threads for logging and logs messages
consisting of the pid, thread number and accurate time to match with the log output.
On my i7-machine, syslogger can currently handle ten clients each writing with 5 ms
waits. Pushing more traffic will cause a tiny amount of messages to be concatenated
as some threads will randomly wait for lock on the message queue until another
message has already been written to the pipe.  This is due to pthread_mutex_lock's
order for multiple waiting threads not being being defined, let alone FIFO.

I tried implementing a ticket based lock by giving each thread an integer as ticket
and spinwaiting until the current thread to be "served" matches that. The performance
increase wasn't significant and some weird bugs were introduced from my quick
implementation so I didn't keep the ticket-system. The limited increase in performance
was expected as my original mutexed queue code was already pretty compact (~15
instuctions at most according to godbolt, compared to the 3 of the ticket increase)
so the optimization was most likely masked by the system's scheduler.

It seems to me that a more robust system would require some other kind of queue
implementation as the bottleneck is the speed at which I can push messages to the
queue. Using a message queue instead of a pipe for inter-process messaging would
enable splitting the messages without using some set character but even that would
result in the time code after a long wait drifting. As it stands, I don't see a way
to make the logger's performance truly deterministic while keeping the current
capacity and ordering in the logging. A queueing thread for each pipe watcher
seems overkill.

Part 5: Clean up
-------------------------------------------------------------------------------
So far, I've used paths relative to argv[0] of the daemon, which doesn't work
reliably with relative call paths. I found out that /proc/self/exe will contain
a symlink to the absolute path so I switched to that as my base.
